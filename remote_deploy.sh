#!/bin/bash
set -e

# --- CONFIGURA√á√ÉO ---
USER="ubuntu"
COMPOSE_FILE="docker-compose.yml"
APP_BASE_DIR="/home/$USER"
DEPLOY_DIR="$APP_BASE_DIR/deploy"
RELEASES_DIR="$APP_BASE_DIR/releases"
CURRENT_LINK="$APP_BASE_DIR/current"
TIMESTAMP=$(date +%Y%m%d%H%M%S)
NEW_RELEASE_DIR="$RELEASES_DIR/$TIMESTAMP"
RELEASES_TO_KEEP=1

# --- CRIA√á√ÉO DA NOVA RELEASE ---
echo "INFO: Criando nova release em $NEW_RELEASE_DIR"
mkdir -p "$RELEASES_DIR" # Garante que o diret√≥rio de releases exista
# Copia todo o conte√∫do (incluindo arquivos ocultos) preservando permiss√µes
cp -a "$DEPLOY_DIR/." "$NEW_RELEASE_DIR/"

# --- CONFIGURAR .env PRIMEIRO ---
echo "INFO: Configurando .env na nova release..."
cd "$NEW_RELEASE_DIR"

# Verificar se .env.example existe antes de mover
if [ -f ".env.example" ]; then
    echo "INFO: Renomeando .env.example para .env"
    mv .env.example .env
else
    echo "ERROR: .env.example n√£o encontrado em $NEW_RELEASE_DIR/"
    echo "Arquivos no diret√≥rio:"
    ls -la
    exit 1
fi

# --- ATIVA√á√ÉO DA NOVA RELEASE ---
echo "INFO: Atualizando link simb√≥lico para a nova release..."
ln -sfn "$NEW_RELEASE_DIR" "$CURRENT_LINK"

# Navega para o diret√≥rio da release ativa (agora via link simb√≥lico)
cd "$CURRENT_LINK"

echo "üöÄ Alterar porta de comunica√ß√£o da api EC2..."
# Altera o mapeamento da porta de 8000:8000 para 80:8000
sed -i 's/"8000:8000"/"80:8000"/g' "$COMPOSE_FILE"

echo "üöÄ Iniciando deploy no servidor EC2..."

# --- DOCKER ---
# (Re)constr√≥i e sobe os containers MINIMIZANDO O DOWNTIME
echo "INFO: üê≥ Subindo containers com Docker Compose..."
docker compose up -d --build --remove-orphans

# --- BANCO DE DADOS E APLICA√á√ÉO ---
# Aplica migra√ß√µes do Django
echo "INFO: üõ†Ô∏è Aplicando migra√ß√µes..."
docker compose exec api python manage.py migrate

# Carrega dados iniciais (se necess√°rio) - **Aten√ß√£o √† idempot√™ncia**
echo "INFO: üì• Carregando dados iniciais (se aplic√°vel)..."
docker compose exec api python manage.py loaddata address
docker compose exec api python manage.py loaddata lacreiid-privacy-docs
docker compose exec api python manage.py loaddata lacreiid-intersectionality
docker compose exec api python manage.py loaddata lacreisaude

docker compose exec -T \
  -e DJANGO_SUPERUSER_EMAIL=teste@teste.com \
  -e DJANGO_SUPERUSER_PASSWORD=@teste1234 \
  api python manage.py createsuperuser --no-input || true

# --- LIMPEZA DE RELEASES ANTIGAS ---
echo "INFO: üßπ Limpando releases antigas (mantendo as √∫ltimas $RELEASES_TO_KEEP)..."
cd "$RELEASES_DIR"
ls -1dt */ | tail -n +$(($RELEASES_TO_KEEP + 1)) | xargs -r sudo rm -rf

# --- VERIFICA√á√ÉO FINAL ---
echo "INFO: ‚úÖ Containers em execu√ß√£o:"
cd "$CURRENT_LINK"
docker compose ps

echo "üéâ Deploy finalizado com sucesso!"